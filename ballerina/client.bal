// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) {{LICENSE_YEAR}}, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.openai.com/v1") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete an assistant.
    #
    # + assistant_id - The ID of the assistant to delete.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete assistants/[string assistant_id](map<string|string[]> headers = {}) returns DeleteAssistantResponse|error {
        string resourcePath = string `/assistants/${getEncodedUri(assistant_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete a thread.
    #
    # + thread_id - The ID of the thread to delete.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete threads/[string thread_id](map<string|string[]> headers = {}) returns DeleteThreadResponse|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a message.
    #
    # + thread_id - The ID of the thread to which this message belongs.
    # + message_id - The ID of the message to delete.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function delete threads/[string thread_id]/messages/[string message_id](map<string|string[]> headers = {}) returns DeleteMessageResponse|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/messages/${getEncodedUri(message_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Returns a list of assistants.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get assistants(map<string|string[]> headers = {}, *ListAssistantsQueries queries) returns ListAssistantsResponse|error {
        string resourcePath = string `/assistants`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves an assistant.
    #
    # + assistant_id - The ID of the assistant to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get assistants/[string assistant_id](map<string|string[]> headers = {}) returns AssistantObject|error {
        string resourcePath = string `/assistants/${getEncodedUri(assistant_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a thread.
    #
    # + thread_id - The ID of the thread to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id](map<string|string[]> headers = {}) returns ThreadObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns a list of messages for a given thread.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) the messages belong to.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/messages(map<string|string[]> headers = {}, *ListMessagesQueries queries) returns ListMessagesResponse|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/messages`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieve a message.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
    # + message_id - The ID of the message to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/messages/[string message_id](map<string|string[]> headers = {}) returns MessageObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/messages/${getEncodedUri(message_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns a list of runs belonging to a thread.
    #
    # + thread_id - The ID of the thread the run belongs to.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/runs(map<string|string[]> headers = {}, *ListRunsQueries queries) returns ListRunsResponse|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a run.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) that was run.
    # + run_id - The ID of the run to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/runs/[string run_id](map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns a list of run steps belonging to a run.
    #
    # + thread_id - The ID of the thread the run and run steps belong to.
    # + run_id - The ID of the run the run steps belong to.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/runs/[string run_id]/steps(map<string|string[]> headers = {}, *ListRunStepsQueries queries) returns ListRunStepsResponse|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}/steps`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves a run step.
    #
    # + thread_id - The ID of the thread to which the run and run step belongs.
    # + run_id - The ID of the run to which the run step belongs.
    # + step_id - The ID of the run step to retrieve.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function get threads/[string thread_id]/runs/[string run_id]/steps/[string step_id](map<string|string[]> headers = {}) returns RunStepObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}/steps/${getEncodedUri(step_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create an assistant with a model and instructions.
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post assistants(CreateAssistantRequest payload, map<string|string[]> headers = {}) returns AssistantObject|error {
        string resourcePath = string `/assistants`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Modifies an assistant.
    #
    # + assistant_id - The ID of the assistant to modify.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post assistants/[string assistant_id](ModifyAssistantRequest payload, map<string|string[]> headers = {}) returns AssistantObject|error {
        string resourcePath = string `/assistants/${getEncodedUri(assistant_id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a thread.
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads(CreateThreadRequest payload, map<string|string[]> headers = {}) returns ThreadObject|error {
        string resourcePath = string `/threads`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Modifies a thread.
    #
    # + thread_id - The ID of the thread to modify. Only the `metadata` can be modified.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id](ModifyThreadRequest payload, map<string|string[]> headers = {}) returns ThreadObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a message.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) to create a message for.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/messages(CreateMessageRequest payload, map<string|string[]> headers = {}) returns MessageObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/messages`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Modifies a message.
    #
    # + thread_id - The ID of the thread to which this message belongs.
    # + message_id - The ID of the message to modify.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/messages/[string message_id](ModifyMessageRequest payload, map<string|string[]> headers = {}) returns MessageObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/messages/${getEncodedUri(message_id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a run.
    #
    # + thread_id - The ID of the thread to run.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/runs(CreateRunRequest payload, map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Modifies a run.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) that was run.
    # + run_id - The ID of the run to modify.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/runs/[string run_id](ModifyRunRequest payload, map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancels a run that is `in_progress`.
    #
    # + thread_id - The ID of the thread to which this run belongs.
    # + run_id - The ID of the run to cancel.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/runs/[string run_id]/cancel(map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}/cancel`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
    #
    # + thread_id - The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
    # + run_id - The ID of the run that requires the tool output submission.
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/[string thread_id]/runs/[string run_id]/submit_tool_outputs(SubmitToolOutputsRunRequest payload, map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/${getEncodedUri(thread_id)}/runs/${getEncodedUri(run_id)}/submit_tool_outputs`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a thread and run it in one request.
    #
    # + headers - Headers to be sent with the request 
    # + return - OK 
    resource isolated function post threads/runs(CreateThreadAndRunRequest payload, map<string|string[]> headers = {}) returns RunObject|error {
        string resourcePath = string `/threads/runs`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
